git init会使所在文件夹变成一个git的工厂;
git add xx.txt 会把该文件添加到git的暂存区中;
git add .会把文件夹中所有的文件添加到暂存区中;
git status 可查询文件的状态;
git commit -m "" 引号中放文件的版本,可将暂存区中的文件放入工厂中,此时暂存区中的文件会自动消除;
git log 可以查询文件版本;
git reset --hard HEAD~1 还原到第一个版本;
git reset --hard HEAD 还原到最新版本;
git reset --hard HEAD^^ 还原到上一个版本;
git reset --hard HEAD xxxxxxxxxxxxxxxxxxxxxxxxx  加上版本Hash码可以还原到想要的版本内容;
工厂中只会保存暂存区中的内容,如果add .提交到暂存区了,只会再来修改文件的内容,之后commit工厂并不会显示修改过的内容；
可以进行两次提交
git checkout xx.txt 可以将没有提交到暂存区中内容移除；
git reset HEAD xx.txt可以将最新提交到暂存区中的内容改为没有提交，并用git checkout xx.txt；
git diff比较文件是否一样；
git ls-files 显示文件夹中所有的文件；
git rm xx.txt 直接从版本库里删除版本；
*git remote add origin http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxx 把当前的本机工厂添加到远程工厂；
*git push origin master 把文件上传到远程工厂；//和上一个命令是一起的；
^git clone http://xxxxxxxxxxxxxxxxxx 获取远程工厂的资源；
^git pull origin master 把别人在远程工厂的东西下载下来；//和上一个命令是一起的；
echo xxx >> xx.txt 从命令提示符之中写文件；
git hash-object xx.txt 检测文件内容，内容为hash码；
git有几个重要组件：tag  blob commit tree;
执行git add .之后，会创建blob组件，blob组件只会对文件内容进行hash操作，相同的文件blob组件都是一样的，不会重复创建；
执行git commit -m "xxxxxxxxxxxxx" 会在文件夹中创建一个文件叫index,index就是暂存区；
执行git commit -m "xxxxxxxxxxxxx" 会创建commit组件，并且为commit组件添加一个tree组件；
git hash-object xx.txt 可以查询文件内容的hash码，如果一样的文件执行add .不会添加新的blob组件；
git cat-file -p master 可以查询最新一个版本的commit组件；
git cat-file -p master xxxxxxxxxxxxxxx x为commit组件版本,可以查询commit组件的tree组件；
git cat-file -p master xxxxxxxxxxxxxxx x为tree组件版本，可以查询tree组件里面的文件和它的blob；
mkdir xx 创建文件夹；
win10 可以用touch xx 创建文件，win8只能在文件夹中手动创建了；
type xx可以查看文件的内容；
git status -s和git status类似，只是状态用？或 A 或者其他字母表示，红色是没有在暂存区中，绿色表示在暂存区中；
git add看添加的不同文件内容，有几个不同内容，就生成几个blob组件，git commit -u ""进行几次commit就生成几个commit组件，
件，然后看comiit提交的有几个不同的文件夹，有几个就生成几个tree组件，如果提交的没有文件夹，也会生成一个tree组件；
如果commit了一次，如果有上一次提交，就会有parent组件，parent组件就是上一次提交的commit组件，当git cat-fi
le -p tree组件的hash码时会看到一个tree组件，但这个并不是新生成的组件，而是原来的组件；
rm xx.txt是从文件夹中删除文件，但是版本库里还是有这个文件的，所有git ls-files 可以看到这个文件；
git所管理的文件夹总共有四个状态：
untrack状态：完全没被git管理的状态，未检索的状态，也是没有add的状态；
unmodify状态：就是add了的状态，处在暂存区中的状态；
modify状态：就是修改了，但是还没有add的状态，也是不再暂存区中的状态；
stage状态：就是处在版本库(或者在本机工厂的状态)，commit之后的状态；
git reset --hard xxxxxxxxxxxxxxxxxx也可以撤销暂存区版本的提交；
git rm xx.txt从版本库和文件夹里删除文件；
git rm --cached xx.txt就是从版本库里删除文件，而文件夹里面有，但用git ls-files看不到，因为这个命令是看版本库里
的文件；执行git rm --cached xx.txt之后，版本库里没有了，但是tree组件里还有，这个是用来还原的，现在文件处于准备删
除的状态，此时，如果commit提交之后 a.txt就会被删除，但是发现文件夹中还在有a.txt，但是这个git认为这个文件和刚
刚删除的那个文件没有关系，如果执行git add .然后有执行git status 命令提示符里会说new file；
git mv xx.txt xxx.txt文件的更名；
每一个细节的变动如果都进行一次提交，那么每一次变动都会进行还原，如果每次提交能找到对应的版本的话；
如果删除了一个版本，然后命令提示符又被不小心关掉的话，可以去所在文件夹中，点开隐藏文件夹git，然后点开文
件夹logs，里面可以看到一个HEAD文件，里面存着所有操作的版本，所以就不用担心还原了；
如果觉得打开文件夹很麻烦，也可以执行git reflog，也可以在命令提示符里看到所有的版本，这个时候执行git reset --hard
HEAD@{}就可以回到想要的版本；
git branch 查看有几个分支；
win10可以用re -rf xx在命令提示符里面删除文件夹；
git branch xx可以建分支；
*指着哪个分支就表示在哪个分支之中，切换分支的命令是git checkout xx;
建了分支，代码是属于主分支的，但是分支也拥有主分支的版本（代码）；
如果在分支上面添加东西，主分支在合并之前是没有分支的内容的；
然后切换到主分支上进行添加，这时并不会添加分支上的东西；
git checkout -b xx表示创建一个分支 并且把它切换到这个分支上；
git merge xxx 在当前分支(或者主分支上)合并；
git branch -d xxx删除分支；
echo xxx > xx.txt这个表示替换文件里面的内容；
echo xxx >> xx.txt这个表示添加东西到文件里，原文件的内容不会被替换；
